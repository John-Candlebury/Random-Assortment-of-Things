package assortment_of_things.campaign.skills

import assortment_of_things.campaign.skills.util.RATBaseShipSkill
import assortment_of_things.campaign.skills.util.SkillManager
import com.fs.starfarer.api.characters.*
import com.fs.starfarer.api.combat.MutableShipStatsAPI
import com.fs.starfarer.api.combat.ShipAPI
import com.fs.starfarer.api.combat.ShipAPI.HullSize
import com.fs.starfarer.api.ui.TooltipMakerAPI
import com.fs.starfarer.api.util.Misc

class QualityOverQuantitySkill : RATBaseShipSkill() {

    var modId = "rat_quality_over_quantity"
    var deploymentModID = "deployment_points_mod"


    var dp = mapOf(HullSize.FRIGATE to 3f, HullSize.DESTROYER to 4f, HullSize.CRUISER to 6f, HullSize.CAPITAL_SHIP to 10f)
    var armor = mapOf(HullSize.FRIGATE to 100f, HullSize.DESTROYER to 200f, HullSize.CRUISER to 300f, HullSize.CAPITAL_SHIP to 450f)
    var speed = mapOf(HullSize.FRIGATE to 25f, HullSize.DESTROYER to 20f, HullSize.CRUISER to 15f, HullSize.CAPITAL_SHIP to 10f)
    var diss = mapOf(HullSize.FRIGATE to 50f, HullSize.DESTROYER to 100f, HullSize.CRUISER to 150f, HullSize.CAPITAL_SHIP to 250f)

    override fun getScopeDescription(): LevelBasedEffect.ScopeDescription {
        return LevelBasedEffect.ScopeDescription.ALL_SHIPS
    }

    override fun hasCustomDescription(): Boolean {
        return true
    }

    override fun createCustomDescription(stats: MutableCharacterStatsAPI?, skill: SkillSpecAPI?, info: TooltipMakerAPI?, width: Float) {

        if (SkillManager.addUnavailableTooltip(info!!, skill!!.id)) return


        info!!.addPara("Improves the quality control of all ships within the fleet, strongly increasing their performance, at the cost of making them more expensive to deploy.", 0f, Misc.getTextColor(), Misc.getHighlightColor())

        info.addSpacer(10f)

        info.addPara("Increases depyloment costs by 3/4/6/10 based on hullsize.", 0f, Misc.getNegativeHighlightColor(), Misc.getNegativeHighlightColor())
        info.addSpacer(2f)
        info.addPara("Increases a ships armor by 100/200/300/450 based on hullsize.", 0f, Misc.getHighlightColor(), Misc.getHighlightColor())
        info.addPara("Increases a ships max speed by 25/20/15/10 based on hullsize.", 0f, Misc.getHighlightColor(), Misc.getHighlightColor())
        info.addPara("Increases a ships flux dissipation by 50/100/150/250 based on hullsize.", 0f, Misc.getHighlightColor(), Misc.getHighlightColor())
        info.addPara("Decreases the flux generated by weapons by 10%%.", 0f, Misc.getHighlightColor(), Misc.getHighlightColor())

    }

    override fun apply(stats: MutableShipStatsAPI?, hullSize: ShipAPI.HullSize?, id: String?, level: Float) {
        if (stats == null) return
        if (hullSize == HullSize.FIGHTER || hullSize == HullSize.DEFAULT) return

        stats.getSuppliesToRecover().modifyFlat(modId, dp.get(hullSize)!!);
        stats.getDynamic().getMod(deploymentModID).modifyFlat(modId, dp.get(hullSize)!!);

        stats.armorBonus.modifyFlat(modId, armor.get(hullSize)!!)
        stats.maxSpeed.modifyFlat(modId, speed.get(hullSize)!!)
        stats.fluxDissipation.modifyFlat(modId, diss.get(hullSize)!!)

        stats.ballisticWeaponFluxCostMod.modifyMult(modId, 0.9f)
        stats.energyWeaponFluxCostMod.modifyMult(modId, 0.9f)
        stats.missileWeaponFluxCostMod.modifyMult(modId, 0.9f)
    }

    override fun unapply(stats: MutableShipStatsAPI?, hullSize: ShipAPI.HullSize?, id: String?) {
        if (stats == null) return


        stats.getSuppliesToRecover().unmodify(modId);
        stats.getDynamic().getMod(deploymentModID).unmodify(modId);

        stats.armorBonus.unmodify(modId)
        stats.maxSpeed.unmodify(modId)
        stats.fluxDissipation.unmodify(modId)

        stats.ballisticWeaponFluxCostMod.unmodify(modId)
        stats.energyWeaponFluxCostMod.unmodify(modId)
        stats.missileWeaponFluxCostMod.unmodify(modId)
    }

}